Creational Design Patterns

1.Singleton
The way create only a instance from a class.
Example:
class A{
	private A a;
	private A(){
	};
	public static A getInstance(){
		if(a==null){
			a= new A();
		}
		return a;
	}

}

2.Factory Design Pattern
The way create different sub-classes from base-class based on parameter.
Example
public class TestFactory {

	public static void main(String[] args) {
		Computer pc = ComputerFactory.getComputer("pc","2 GB","500 GB","2.4 GHz");
		Computer server = ComputerFactory.getComputer("server","16 GB","1 TB","2.9 GHz");
	}

}

4.Buider Pattern
The way helps us to slice the operations of building an object
Example
Pizza pizza = new Pizza.Builder(12)
                       .cheese(true)
                       .pepperoni(true)
                       .bacon(true)
                       .build();

5.Prototype Design Pattern 
The way create a cloned object from prototype object.
Example
public class Employees implements Cloneable{

	private List<String> empList;
	
	public Employees(){
		empList = new ArrayList<String>();
	}
	
	public Employees(List<String> list){
		this.empList=list;
	}
	public void loadData(){
		//read all employees from database and put into the list
		empList.add("Pankaj");
		empList.add("Raj");
		empList.add("David");
		empList.add("Lisa");
	}
	
	public List<String> getEmpList() {
		return empList;
	}

	@Override
	public Object clone() throws CloneNotSupportedException{
			List<String> temp = new ArrayList<String>();
			for(String s : this.getEmpList()){
				temp.add(s);
			}
			return new Employees(temp);
	}
	
}

Structural Design Patterns
